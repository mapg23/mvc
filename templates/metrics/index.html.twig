{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}

<main class="main metrics">
    <h1>Metrics</h1>

    <h2>Introduktion</h2>

    <p>
        De sex C:na är codestyle, coverage, complexity, cohesion, coupling och crap. <br>

        <br>

        Det första C:et codestyle handlar om hur man skriver sin kod,
        detta kan inkludera design patterns, men även hur man generellt skriver sin kod. <br>
        Att ha en bra codestyle är oftast viktigt då det gör det lättare för både dig själv och andra att läsa koden.<br>

        <br>

        Det andra C:et är coverage, detta handlar om hur väl din kod är testad, mer coverage av kod brukar oftast resultera i mindre buggar. <br>
        Att ha låg coverage måste inte alltid betyda att det finns buggar i koden,
        min coverage på denna hemsidan är relativt låg på 26 procent, <br>
        detta är för att jag inte har unit-testat mina controller klasser samt annat som oftast inte behöver testas. <br>

        <br>

        Det tredje C:et är complexity. En hög complexity resulterar oftast i att koden blir svårare att underhålla och svårare att använda sig av. <br>
        En kod med hög complexity brukar oftast ha högre antal bugar per klass än andra klasser.<br>

        <br>
        
        Det fjärde C:et är cohesion, cohesion handlar om hur väl metoder och variabler passar in i klassen. <br>
        Med cohesion vill man oftast ha ett så lågt tal som möjligt och klasser med hög cohesion border oftast delas upp till flera olika klasser. <br>
        Ett exempel på detta är mina Game klass i black jack spelet som har en cohesion på 134, denna klassen används både som spelet, spelaren och dealern. <br>

        <br>

        Det femte C:et är coupling, coupling är ett mätvärde för hur många av klasserna som är beroende av varandra. <br>
        Coupling mäts i utgående connections (AC), samt inkommande connections (EC). <br>
        Att ha ett högt utgående antal kan tyda på att den klassen använder sig av många andra klasser.<br>
        Om en klass har ett högt inkommande antal kan det bero på att många andra klasser är beroende av just denna klass. <br>

        <br>

        Det sjätte C:et är crap, crap står för Change Risk Analyzer and Predictor (CRAP). <br>
        Crap är ett mätvärde för hur mycket tid det kommer ta för att fixa till dåliga (crappy) metoder. <br>
        För att minska antalet crap behöver antingen metoden bli mindre complex eller införskaffa sig flera unit-tester.
    </p>

    <hr>
    <h2>Phpmetrics</h2>

    <img class="metric-img" src="{{ asset('img/phpmetrics.png')}}" alt="phpmetrics image">

    <p>
        Phpmetrics genererade nio violations, ett genomsnittsvärde på 4.05 på komplexitet per klass och ett genomsnittsvärde på 0.13 buggar per klass av min kod. <br>
        Dessa mätvärden visade att min Game klass kan vara buggad då den har ganska stor volym, mycket coupling och hög difficulty. <br>
        Detta hade kunnat fixas genom att dela upp game klassen och minska dess beroende av andra klasser.
    </p>
        <img class="metric-img" src="{{ asset('img/game-stats.png')}}" alt="Game stats image">
        <img class="metric-img" src="{{ asset('img/game-stats_01.png')}}" alt="Game stats image">

    <p>
        Min ApiController klass följer inte "single responsibility principle" principen, <br>
        klassen har även för många publika metoder och använder sig av för många externa klasser. <br>
        Detta kan fixas genom att dela upp klassen i flera olika klasser, där var och en av klasserna har ett enda syfte. <br>
    </p>

    <img class="metric-img" src="{{ asset('img/api-controller.png')}}" alt="Api controller image">

    <p>
        Min ProductController klass följer heller inte single responsibility principen och har blivit ett god object, <br>
        detta beror på för många metoder med olika syften och en användning av för många externa klasser. <br>
    </p>

    <hr>
    <h2>Scrutinizer</h2>

    <div class="badge-container">
        <img class="metric-badge" src="https://scrutinizer-ci.com/g/mapg23/mvc/badges/quality-score.png?b=main" alt="Scrutinizer badge">
        <img class="metric-badge" src="https://scrutinizer-ci.com/g/mapg23/mvc/badges/coverage.png?b=main" alt="Scrutinizer badge">
        <img class="metric-badge" src="https://scrutinizer-ci.com/g/mapg23/mvc/badges/build.png?b=main" alt="Scrutinizer badge">
    </div>

    <p>
        Analysen av scrutinizer gav en kvalitets score på 9.97 med en kod-täckning på 26 procent och en build som klarats. <br>
        För att öka kvalitets score från analysen behöver metoden calculateScore i CardHand klassen fixas till. <br>
        Metoden har betyget B men behöver ett A för att analysen ska få ett kvalitets score på 10. <br>
        Enligt scrutinizer är calculateScore för komplex för att uppnå betyget A. <br>
        Metoden har ett crap score på 7 och behöver fler conditions. <br>

        <br>

        Kod-täckningen av koden är relativt låg på 26 procent. <br>
        Den låga kod-täckningen beror på att varken entity's, repository's, controller's eller Dice spelet är unit-testat.<br>
        För att uppnå högre kod-täckning behöver dessa klasser unit-tester.<br>
    </p>

    <hr>
    <h2>Förbättringar</h2>

    <p>
        Innan förbättringarna ligger kvalitets score på 9.97 och kod-täckningen på 26 procent. <br>

        <br>

        För att förbättra min kod har jag valt att öka kod-täckningen, <br>
        jag tänker öka kod-täckning på mina klasser för Dice spelet. <br>

        <br>

        En annan förbättring är att fixa calculateScore metoden i CardHand klassen för att uppna ett kvalitets score på 10. <br>
        För att göra detta kommer jag fokusera på att minska komplexiteten i just den metoden. <br>

        <br>

        Jag kommer även fixa till en bug med en kommentar i min Game klass där parameterns array med typ mixed inte fungerar. <br>

        Efter mina förbättringar lyckades jag få en score på 10 vilket är den högsta scoren. <br>
        Jag lyckades även öka min kod-täckning från 26 procent till 30 procent, samt fixa en bugg i min Game klass.
    </p>

    <hr>
    <h2>Diskussion</h2>

    <p>
        Att arbeta med clean code med hjälp av de sec C:na samt phpmetrics och scrutinizer har varit mycket hjälpsamt. <br>
        En nackdel med att arbeta med scrutinizer är att den räknar coverage på allt vilket inkluderar filer som egentligen inte behöver coverage. <br>
    </p>

</main>

</div>

{% endblock %}