{% extends "base.html.twig" %}

{% block title %} Report {% endblock %}

{% block body %}

    <main class="main report">

        <div class="report-selector">
            <a href="#kmom01">Kmom01</a>
            <a href="#kmom02">Kmom02</a>
            <a href="#kmom03">Kmom03</a>
            <a href="#kmom04">Kmom04</a>
            <a href="#kmom05">Kmom05</a>
            <a href="#kmom06">Kmom06</a>
            <a href="#kmom07">Kmom07/10</a>
        </div>

        <div class="report-section" >
                <h2 id="kmom01">kmom01</h2>

                <p>
                    Jag har sedan innan jobbat med objektorienterad programering i kurser där jag använt mig av python och javascript. <br>
                    Utöver detta har jag på fritiden använt mig av objektorienterad programering inom C# och java. <br>

                    <br>

                    Ett objekt är en instans av en klass, alltså skapas alla objekt utifrån en klass. <br>
                    Ett objekt har properties och metoder kopplade till det objektet,
                    allt som objektet lagrar finns i dess properties och allt man kan göra med objektet görs via dess metoder. <br>

                    <br>

                    Jag tycker att strukturen som använts till uppgiften är bra och enkel att navigera. <br>
                    Koden är uppdelad i kodstrukturen mvc som separerar logiken från vyerna med hjälp av controllers. <br>

                    <br>

                    I artiklen "PHP The Right Way" finns det väldigt värdefull information om hur man på bästa sättet kan använda php. <br>
                    en intressant och värdefull del av artiklen är Coding practices där dem går igenom hur man skriver bra php kod. <br>
                    I delen Coding practices finns det en kort text angående design patterns som jag hade velat veta mer om. <br>
                    En annan intressant och värdefull del i artiklen är delen Databases där dem går igenom hur man använder sig av databaser. <br>

                    <br>

                    Min TIL för detta kursmomentet är att det finns ett php ramverk som heter symphony.

                </p>
        </div>

        <div class="report-section" >
                <h2 id="kmom02">kmom02</h2>

                <p>
                    Arv är klasser som härstammar från andra klasser, 
                    alltså en klass kan arva variabler och metoder från en annan klass. <br>
                    En komposition är när en klass har en annan klass, 
                    exempelvis att en klass har en variabel vars värde är den andra klassen. <br>
                    Interfaces används för att tvinga en klass att implementera samma metoder som interfacet,
                    För att använda en inteface så implementar man istället för att extenda en klass, 
                    Metoderna som interfacet har är upp till klassen att göra, men dem måste finnas med. <br>
                    Traits används i programeringsspråk som endas har tillgång till enskilda arv,
                    koden som skrivs i traits kan alltså återbrukas i andra klasser. <br>

                    <br>

                    Jag löste uppgiften genom att använda min Card klass som en bas klass för min CardGraphic klass,
                    Jag använde sen komposition med DeckOfCards klassen som har x antal CardGraphics i en array som ska representera kort.
                    CardHand vart inte behövlig för uppgiften, men jag gav klassen en array för att hålla CardGraphics samt en add metod.
                    Jag är nöjd med uppgiften, men hade kunnat skriva om klasserna för att förbättra dem.<br>

                    <br>

                    Att jobba i Symfony med applikationskod enligt MVC går bra, det är bra strukurerat och enkelt att navigera. <br>

                    <br>

                    Min TIL för detta kursmomentet är att man kan skicka med argument i twigs path funktion.
                </p>
        </div>

        <div class="report-section" >
            <h2 id="kmom03">kmom03</h2>
            <p>
                Jag hade stor användning av både flödesdiagrammet och pseudokoden. <br>
                Jag använde flödesdiagrammet i början för att veta vad som skulle göras näst. <br> 
                Pseudokoden var mycket hjälpsam när jag skulle skapa logiken bakom spelet,
                den gav mig en bättre helhet av hur kortspelet skulle se ut vilket skyndade på modelleringen. <br>

                <br>

                För att lösa uppgiften skapade jag mig en ny klass som heter Game, 
                denna klassen håller all data och det är i klassen som all data laddas upp till sessionen. <br>
                Game har två variabler som är CardHands klasser. <br>
                Dessa klasser ska representera en spelares hand och dealerns hand. <br>
                I CardHand klasserna implementerade jag ett par nya metoder så att klasserna skulle stödja spelet. <br>
                Som kort återanvände jag mig av CardGraphic klassen som kort.<br>

                <br>

                Jag är nöjd med min lösning av uppgiften, men jag hade kunnat separera mer på klasserna och lagt mer funktionalitet i CardHand klassen som nu istället ligger i Game klassen. <br>
                Att använda sig av ramverket Symfony fungerar bra, det går ganska snabbt att koda i det när man väl kommit in i det. <br>

                <br>

                Min TIL för detta kursmoment är vad phpstan och phpmd är.

            </p>

        </div>

        <div class="report-section" >
            <h2 id="kmom04">kmom04</h2>
        </div>

        <div class="report-section" >
            <h2 id="kmom05">kmom05</h2>
        </div>

        <div class="report-section" >
            <h2 id="kmom06">kmom06</h2>
        </div>

        <div class="report-section" >
            <h2 id="kmom07">kmom07/10</h2>
        </div>

    </main>

{% endblock %}