{% extends "base.html.twig" %}

{% block title %} Report {% endblock %}

{% block body %}

    <main class="main report">

        <div class="report-selector">
            <a href="#kmom01">Kmom01</a>
            <a href="#kmom02">Kmom02</a>
            <a href="#kmom03">Kmom03</a>
            <a href="#kmom04">Kmom04</a>
            <a href="#kmom05">Kmom05</a>
            <a href="#kmom06">Kmom06</a>
            <a href="#kmom07">Kmom07/10</a>
        </div>

        <div class="report-section" >
                <h2 id="kmom01">kmom01</h2>

                <p>
                    Jag har sedan innan jobbat med objektorienterad programering i kurser där jag använt mig av python och javascript. <br>
                    Utöver detta har jag på fritiden använt mig av objektorienterad programering inom C# och java. <br>

                    <br>

                    Ett objekt är en instans av en klass, alltså skapas alla objekt utifrån en klass. <br>
                    Ett objekt har properties och metoder kopplade till det objektet,
                    allt som objektet lagrar finns i dess properties och allt man kan göra med objektet görs via dess metoder. <br>

                    <br>

                    Jag tycker att strukturen som använts till uppgiften är bra och enkel att navigera. <br>
                    Koden är uppdelad i kodstrukturen mvc som separerar logiken från vyerna med hjälp av controllers. <br>

                    <br>

                    I artiklen "PHP The Right Way" finns det väldigt värdefull information om hur man på bästa sättet kan använda php. <br>
                    en intressant och värdefull del av artiklen är Coding practices där dem går igenom hur man skriver bra php kod. <br>
                    I delen Coding practices finns det en kort text angående design patterns som jag hade velat veta mer om. <br>
                    En annan intressant och värdefull del i artiklen är delen Databases där dem går igenom hur man använder sig av databaser. <br>

                    <br>

                    Min TIL för detta kursmomentet är att det finns ett php ramverk som heter symphony.

                </p>
        </div>

        <div class="report-section" >
                <h2 id="kmom02">kmom02</h2>

                <p>
                    Arv är klasser som härstammar från andra klasser, 
                    alltså en klass kan arva variabler och metoder från en annan klass. <br>
                    En komposition är när en klass har en annan klass, 
                    exempelvis att en klass har en variabel vars värde är den andra klassen. <br>
                    Interfaces används för att tvinga en klass att implementera samma metoder som interfacet,
                    För att använda en inteface så implementar man istället för att extenda en klass, 
                    Metoderna som interfacet har är upp till klassen att göra, men dem måste finnas med. <br>
                    Traits används i programeringsspråk som endas har tillgång till enskilda arv,
                    koden som skrivs i traits kan alltså återbrukas i andra klasser. <br>

                    <br>

                    Jag löste uppgiften genom att använda min Card klass som en bas klass för min CardGraphic klass,
                    Jag använde sen komposition med DeckOfCards klassen som har x antal CardGraphics i en array som ska representera kort.
                    CardHand vart inte behövlig för uppgiften, men jag gav klassen en array för att hålla CardGraphics samt en add metod.
                    Jag är nöjd med uppgiften, men hade kunnat skriva om klasserna för att förbättra dem.<br>

                    <br>

                    Att jobba i Symfony med applikationskod enligt MVC går bra, det är bra strukurerat och enkelt att navigera. <br>

                    <br>

                    Min TIL för detta kursmomentet är att man kan skicka med argument i twigs path funktion.
                </p>
        </div>

        <div class="report-section" >
            <h2 id="kmom03">kmom03</h2>
            <p>
                Jag hade stor användning av både flödesdiagrammet och pseudokoden. <br>
                Jag använde flödesdiagrammet i början för att veta vad som skulle göras näst. <br> 
                Pseudokoden var mycket hjälpsam när jag skulle skapa logiken bakom spelet,
                den gav mig en bättre helhet av hur kortspelet skulle se ut vilket skyndade på modelleringen. <br>

                <br>

                För att lösa uppgiften skapade jag mig en ny klass som heter Game, 
                denna klassen håller all data och det är i klassen som all data laddas upp till sessionen. <br>
                Game har två variabler som är CardHands klasser. <br>
                Dessa klasser ska representera en spelares hand och dealerns hand. <br>
                I CardHand klasserna implementerade jag ett par nya metoder så att klasserna skulle stödja spelet. <br>
                Som kort återanvände jag mig av CardGraphic klassen som kort.<br>

                <br>

                Jag är nöjd med min lösning av uppgiften, men jag hade kunnat separera mer på klasserna och lagt mer funktionalitet i CardHand klassen som nu istället ligger i Game klassen. <br>
                Att använda sig av ramverket Symfony fungerar bra, det går ganska snabbt att koda i det när man väl kommit in i det. <br>

                <br>

                Min TIL för detta kursmoment är vad phpstan och phpmd är.
            </p>

        </div>

        <div class="report-section" >
            <h2 id="kmom04">kmom04</h2>

            <p>

                Att unit testa med PHPUnit har gått bra och det har varit relativt enkelt att testa med. <br>
                Phpunit är väldigt likt pythons unittest vilket gjorde testandet enklare och snabbare. <br>

                <br>

                Jag återanvände vissa av klasserna från kortleks uppgiften 
                vilket gjorde att jag behövde skriva unit tester till alla dess klasser. <br>
                Unit testerna för dessa klasser uppfyller ~95 procent kodtäckning. <br>
                Sedan skapade jag en ny klass som heter Game, denna klassen fick ~99 procent kodtäckning. <br>
                <br>

                Jag upplever min kod som ganska testbar, 
                jag hade i åtanke att spelet skulle kunna köras i konsolen när jag skrev koden. <br>

                <br>

                Jag valde att skriva om all session logik som låg i min game klass och flyttade den till kontrollern. <br>
                Jag skrev om min konstruktor och gav den en array som parameter där all session data tas läggs till. <br>
                I kontrollern skapade jag två nya metoder för att minska antalet kod i alla routes. <br>
                För att enklare kunna testa min game klass skapade jag ett par nya getters för mina instansvariabler. <br>
                <br>

                För att ha en kod som är enkel att testa behöver koden oftast vara ren skriven, <br>
                dock behöver den inte vara snygg, men om man skriver ren kod resulterar det oftast i snygg kod. <br>

                <br>

                Min Til för detta kursmoment är vad phpdoc är som automatiskt dokumenterar php-kod. <br>
            </p>
        </div>

        <div class="report-section" >
            <h2 id="kmom05">kmom05</h2>

            <p>
            Att jobba med doctrine vart till en början en aning svårt då det vart mycket nya saker att använda sig av,
            men det gick sedan bra. <br>
            Att refrerera till ett repository med hjälp av doctrine vart ganska svårt och gav mig ett par phpstan errors som vart svåra att reda ut. <br>

            <br>

            Vid utvecklingen av min applikation tänkte jag att utgångspunkten av biblioteket skulle vara vid sidan som visar alla böcker i en tabell, <br>
            för att få det så valde jag att göra länkar till updatering, bortagning eller mer info om en specific bok i den tabellen.
            Jag valde dock att lägga länken för att lägga till nya böcker på startsidan. <br>

            <br>
            Att arbeta med ORM i CRUD gick väldigt bra,
            jag valde att använda mig av orms implementation av att göra sql frågor men har även skrivit ett par metoder i vanlig sql. <br>

            <br>

            Jag finner ORM mycket trevligt att arbeta med, <br>
            det kan dock bli lite besvärligare när man vill ha ut sin data i en array istället för i en klass som man oftast får när man arbetar med andra sätt.
            <br>

            <br>


            Min til är att ORM står för Objekt-relation mapping.

            </p>
        </div>

        <div class="report-section" >
            <h2 id="kmom06">kmom06</h2>

            <p>
            Jag uppfattade verktyget phpmetrics som mycket hjälpbart, speciellt att den skriver ut hur benägen en klass är till buggar. <br>
            En hjälpsam sak med phpmetrics vart bilden på maintainability/complexity som visar klasserna och hur svåra dem är att underhålla. <br>

            <br>

            Att integrera med Scrutinizer gick enkelt och bra,
            verktyget är mycket hjälpsamt och dess badges är bra för att veta hur utvecklat ett repository är. <br>
            Efter mitt första bygge fick jag en kodtäckning på 26 procent och en kodkvalitet på 9.97. <br>

            <br>

            Jag tror inte man kan påvisa kodkvalitet med hjälp av några badges då man kan exkludera vissa klasser för att nå en högre kodkvalitet. <br>

            <br>

            Min til för detta kursmoment är vad Scrutinizer är.
            </p>

        </div>

        <div class="report-section" >
            <h2 id="kmom07">kmom07/10</h2>


            <p>
                Jag började med att göra en ny kontroller för min landningssida /proj, samt twig filer till dessa sidor. <br>
                <br>

                Projektet jag valt att göra är BlackJack, för detta projektet skapade jag tre klasser, Card, Game och Hand. <br>
                Game klassen fungerar som själva spelet och hand klasserna som spelarna och huset. <br>
                Card klasserna ska representera korten som spelarna och huset har. <br>
                Card klassen består av getters för kortets typ och nummer samt en getter för kortets bild. <br>
                Hand klassen består av en array av Card klassen för att representera korten, <br>
                det är även i hand klassen som kortens poäng räknas ut. <br>
                I Game klassen ligger hand klasserna i en array med en bool som bestämmer om användaren använder handen eller inte, detta så att användaren kan spela mer än en hand samtidigt. <br>
                Efter att spelaren har klickat hur många händer som ska spelas och antingen hit eller stand kan spelaren klicka next round, då låses händerna in så att spelaren inte kan spela ytterligare händer. <br>
                Vid nästa runda så spelar även huset och när spelet är slut står resultatet för varje hand samt huset. <br>
                När spelet är färdigt visas länken new game som man kan klicka på för att starta om spelet. <br>
                För att spara all data från spelet skapade jag två metoder i kontroller klassen som sparar datan till session och en som tar datan från session. <br>
                <br>


                Utseendet av projektet skiljer sig från resten av hemsidan, projektet fick ytterligare en navbar, dock är denna vertikal. <br>
                Färgerna skiljer sig även och har en grön bakgrund med annan font. <br>
                
                <br>

                Projektet inkluderar även en readme fil med klickbara badges för scrutinizer rapport angående build, coverage och quality. <br>
                Readme filen består även av en beskrivning av innehållet och en installationsguide. <br>
                
                <br>

                I navbaren för projektet finns en länk till api:t, här finns fem olika länkar som returnerar en json response där en av dem är en post. <br>
                Dessa json routes returnerar ett draget kort för en specifik hand, husets hand, alla spelarens händer, matchens status samt en route som sätter stand till true på alla händer som spelaren använder. <br>

                <br>

                Projektet gick bra att utföra, och gick ganska snabbt. <br>
                Det var ganska svårt att få flera händer att spela samtidigt. <br>
                Utöver detta gick projektet bra. <br>
                Jag tycker att detta är ett rimligt projekt för kursen. <br>
                Jag tycker att materialet och handledningen har varit bra. <br>
                Dock hade jag gärna velat ha mer än ett kursmoment som involverat ORM. <br>
                Utöver detta är jag nöjd med kursen. <br>
                Betyget jag ger för kursen är 6/10. <br>
            </p>
        </div>

    </main>

{% endblock %}